{"version":3,"file":"fjl.errorThrowing.js","sources":["../../src/generated/version.js","../../src/fjl.errorThrowing.js"],"sourcesContent":["/**\n * Content generated by '{project-root}/node-scripts/VersionNumberReadStream.js'.\n * Generated Sun Oct 15 2017 23:55:50 GMT-0400 (Eastern Daylight Time) \n */\n\nexport let version = '0.5.0';\n\nexport default version;\n\n","/**\r\n * @module fjlErrorThrowing\r\n */\r\nimport {\r\n    typeOf,\r\n    _isType as isType,\r\n    map, length, intercalate,\r\n    isString, isArray, isFunction\r\n} from 'fjl';\r\n\r\n/**\r\n * @memberOf module:fjlErrorThrowing\r\n * @property version {String}\r\n */\r\nexport {version} from './generated/version';\r\n\r\n/**\r\n * @typedef {*} Any\r\n * @typedef {Object<value, valueName, expectedTypeName, foundTypeName>} TemplateContext\r\n */\r\n\r\n/**\r\n * Error message template function.\r\n * @typedef {Function} errorMessageCall\r\n * @param tmplContext {TemplateContext}\r\n * @returns {String}\r\n */\r\n\r\n/**\r\n * Used to ensure value matches passed in type.\r\n * @typedef {Function} errorIfNotType\r\n * @param valueName {String}\r\n * @param value {Any}\r\n * @param type {String|Function} - Constructor name or constructor.\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {Undefined}\r\n */\r\n\r\n/**\r\n * Used to ensure a value matches one of one or more types passed in.\r\n * @typedef {Function} errorIfNotTypes\r\n * @param valueName {String}\r\n * @param value {Any}\r\n * @param valueTypes {...(String|Function)} - Constructor names or constructors.\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {Undefined}\r\n */\r\n\r\nconst\r\n\r\n    /**\r\n     * Resolves/normalizes a type name from either a string or a constructor.\r\n     * @private\r\n     * @function module:fjlErrorThrowing.getTypeName\r\n     * @param type {Function|String} - String or function representing a type.\r\n     * @returns {String}\r\n     * @private\r\n     */\r\n    getTypeName = type => {\r\n        if (isString(type)) { return type; }\r\n        else if (isFunction(type)) { return type.name; }\r\n        throw Error('`fjl.error.getTypeName` only accepts strings and/or constructors.  ' +\r\n            'Value type received: ' + typeOf(type) + ';  Value: ' + type);\r\n    },\r\n\r\n    /**\r\n     * Pretty prints an array of types/type-strings for use by error messages;\r\n     * Outputs \"`SomeTypeName`, ...\" from [SomeType, 'SomeTypeName', etc...]\r\n     * @private\r\n     * @function module:fjlErrorThrowing.multiTypesToString\r\n     * @param types {Array|TypesArray}\r\n     * @return {String}\r\n     * @private\r\n     */\r\n    multiTypesToString = types => length(types) ?\r\n             intercalate(', ', map(type => `\\`${getTypeName(type)}\\``, types)) : '',\r\n\r\n    /**\r\n     * Prints a message from an object.  Object signature:\r\n     * {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n     * @function module:fjlErrorThrowing.defaultErrorMessageCall\r\n     * @param tmplContext {Object|TemplateContext} - Object to use in error template.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    defaultErrorMessageCall = tmplContext => {\r\n        const {\r\n            contextName, valueName, value, expectedTypeName,\r\n            foundTypeName, messageSuffix\r\n        } = tmplContext,\r\n            isMultiTypeNames = isArray(expectedTypeName),\r\n            typesCopy = isMultiTypeNames ? 'of type' : 'of one of the types',\r\n            typesToMatchCopy = isMultiTypeNames ? multiTypesToString(expectedTypeName) : expectedTypeName;\r\n        return (contextName ? `\\`${contextName}.` : '`') +\r\n            `${valueName}\\` is not ${typesCopy}: ${typesToMatchCopy}.  ` +\r\n            `Type received: ${foundTypeName}.  Value: ${value};` +\r\n            `${messageSuffix ?  '  ' + messageSuffix + ';' : ''}`;\r\n    },\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that values are of a given type.\r\n     *   Also throws informative error messages containing the value types, names, expected type names,\r\n     *   etc.\r\n     * @function module:fjlErrorThrowing.getErrorIfNotTypeThrower\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param errorMessageCall {Function|errorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|errorIfNotType}\r\n     */\r\n    getErrorIfNotTypeThrower = (contextName, errorMessageCall) => (valueName, value, ValueType, messageSuffix = null) => {\r\n        const expectedTypeName = getTypeName(ValueType),\r\n            foundTypeName = typeOf(value);\r\n        if (isType(expectedTypeName, value)) { return; }\r\n        throw new Error(errorMessageCall(\r\n            {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n        ));\r\n    },\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that a value is of one or more given types.\r\n     *   The returned function is used in cases where informative error messages\r\n     *   containing the value types, names, expected type names, are-required/should-be-used etc.\r\n     * @function module:fjlErrorThrowing.getErrorIfNotTypesThrower\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param errorMessageCall {Function|errorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|errorIfNotTypes}\r\n     */\r\n    getErrorIfNotTypesThrower = (contextName, errorMessageCall) => (valueName, value, ...valueTypes) => {\r\n        const expectedTypeNames = valueTypes.map(getTypeName),\r\n            matchFound = expectedTypeNames.some(ValueType => isType(ValueType, value)),\r\n            foundTypeName = typeOf(value);\r\n        if (matchFound) { return; }\r\n        throw new Error(\r\n            errorMessageCall({\r\n                contextName, valueName, value,\r\n                expectedTypeName: expectedTypeNames, foundTypeName\r\n            })\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that values are of a given type.\r\n     * This function is the same as `getErrorIfNotTypeThrower` except it\r\n     * doesn't expect and `errorMessageCall` or template function (uses a default-ly defined one)\r\n     *   Also throws informative error messages containing the value types, names, expected type names, etc.\r\n     * @function module:fjlErrorThrowing.errorIfNotTypeThrower\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @returns {Function|errorIfNotType}\r\n     */\r\n    errorIfNotTypeThrower = contextName =>\r\n        getErrorIfNotTypeThrower(contextName, defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that a value is of one or more given types.\r\n     * This function is the same as `getErrorIfNotTypesThrower` except it\r\n     * doesn't expect an `errorMessageCall` or template function (uses a default-ly defined one)\r\n     *   The returned function is used in cases where informative error messages\r\n     *   containing the value types, names, expected type names, are-required/should-be-used etc.\r\n     * @function module:fjlErrorThrowing.errorIfNotTypesThrower\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @returns {Function|errorIfNotTypes}\r\n     */\r\n    errorIfNotTypesThrower = contextName =>\r\n        getErrorIfNotTypesThrower(contextName, defaultErrorMessageCall);\r\n\r\nexport {\r\n    getErrorIfNotTypeThrower,\r\n    getErrorIfNotTypesThrower,\r\n    errorIfNotTypeThrower,\r\n    errorIfNotTypesThrower\r\n};\r\n"],"names":["version","getTypeName","isString","type","isFunction","name","Error","typeOf","multiTypesToString","length","types","intercalate","map","defaultErrorMessageCall","contextName","tmplContext","valueName","value","expectedTypeName","foundTypeName","messageSuffix","isMultiTypeNames","isArray","typesCopy","typesToMatchCopy","getErrorIfNotTypeThrower","errorMessageCall","ValueType","isType","getErrorIfNotTypesThrower","valueTypes","expectedTypeNames","matchFound","some","errorIfNotTypeThrower","errorIfNotTypesThrower"],"mappings":";;;;AAAA;;;;;AAKA,AAAO,IAAIA,UAAU,OAAd;;ACLP;;;AAGA,AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,IAUIC,cAAc,SAAdA,WAAc,OAAQ;QACdC,aAASC,IAAT,CAAJ,EAAoB;eAASA,IAAP;KAAtB,MACK,IAAIC,eAAWD,IAAX,CAAJ,EAAsB;eAASA,KAAKE,IAAZ;;UACvBC,MAAM,wEACR,uBADQ,GACkBC,WAAOJ,IAAP,CADlB,GACiC,YADjC,GACgDA,IADtD,CAAN;CAbR;IA0BIK,qBAAqB,SAArBA,kBAAqB;WAASC,WAAOC,KAAP,IACrBC,gBAAY,IAAZ,EAAkBC,QAAI;qBAAaX,YAAYE,IAAZ,CAAb;KAAJ,EAAwCO,KAAxC,CAAlB,CADqB,GAC+C,EADxD;CA1BzB;IAqCIG,0BAA0B,SAA1BA,uBAA0B,cAAe;QAEjCC,WAFiC,GAIjCC,WAJiC,CAEjCD,WAFiC;QAEpBE,SAFoB,GAIjCD,WAJiC,CAEpBC,SAFoB;QAETC,KAFS,GAIjCF,WAJiC,CAETE,KAFS;QAEFC,gBAFE,GAIjCH,WAJiC,CAEFG,gBAFE;QAGjCC,aAHiC,GAIjCJ,WAJiC,CAGjCI,aAHiC;QAGlBC,aAHkB,GAIjCL,WAJiC,CAGlBK,aAHkB;QAKjCC,gBALiC,GAKdC,YAAQJ,gBAAR,CALc;QAMjCK,SANiC,GAMrBF,mBAAmB,SAAnB,GAA+B,qBANV;QAOjCG,gBAPiC,GAOdH,mBAAmBb,mBAAmBU,gBAAnB,CAAnB,GAA0DA,gBAP5C;;WAQ9B,CAACJ,oBAAmBA,WAAnB,SAAoC,GAArC,KACAE,SADA,iBACsBO,SADtB,UACoCC,gBADpC,iCAEeL,aAFf,kBAEyCF,KAFzC,iBAGAG,gBAAiB,OAAOA,aAAP,GAAuB,GAAxC,GAA8C,EAH9C,EAAP;CA7CR;IA4DIK,2BAA2B,SAA3BA,wBAA2B,CAACX,WAAD,EAAcY,gBAAd;WAAmC,UAACV,SAAD,EAAYC,KAAZ,EAAmBU,SAAnB,EAAuD;YAAzBP,aAAyB,uEAAT,IAAS;;YAC3GF,mBAAmBjB,YAAY0B,SAAZ,CAAzB;YACIR,gBAAgBZ,WAAOU,KAAP,CADpB;YAEIW,YAAOV,gBAAP,EAAyBD,KAAzB,CAAJ,EAAqC;;;cAC/B,IAAIX,KAAJ,CAAUoB,iBACZ,EAACZ,wBAAD,EAAcE,oBAAd,EAAyBC,YAAzB,EAAgCC,kCAAhC,EAAkDC,4BAAlD,EAAiEC,4BAAjE,EADY,CAAV,CAAN;KAJuB;CA5D/B;IA8EIS,4BAA4B,SAA5BA,yBAA4B,CAACf,WAAD,EAAcY,gBAAd;WAAmC,UAACV,SAAD,EAAYC,KAAZ,EAAqC;0CAAfa,UAAe;sBAAA;;;YAC1FC,oBAAoBD,WAAWlB,GAAX,CAAeX,WAAf,CAA1B;YACI+B,aAAaD,kBAAkBE,IAAlB,CAAuB;mBAAaL,YAAOD,SAAP,EAAkBV,KAAlB,CAAb;SAAvB,CADjB;YAEIE,gBAAgBZ,WAAOU,KAAP,CAFpB;YAGIe,UAAJ,EAAgB;;;cACV,IAAI1B,KAAJ,CACFoB,iBAAiB;oCAAA,EACAV,oBADA,EACWC,YADX;8BAEKc,iBAFL,EAEwBZ;SAFzC,CADE,CAAN;KALwB;CA9EhC;IAoGIe,wBAAwB,SAAxBA,qBAAwB;WACpBT,yBAAyBX,WAAzB,EAAsCD,uBAAtC,CADoB;CApG5B;IAiHIsB,yBAAyB,SAAzBA,sBAAyB;WACrBN,0BAA0Bf,WAA1B,EAAuCD,uBAAvC,CADqB;CAjH7B;;;;;;;;;;;;;;"}