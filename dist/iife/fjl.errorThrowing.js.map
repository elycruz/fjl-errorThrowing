{"version":3,"file":"fjl.errorThrowing.js","sources":["../../src/generated/version.js","../../src/fjl.errorThrowing.js"],"sourcesContent":["/**\n * @memberOf module:fjlErrorThrowing\n * @property version {String} - Semantic version string.\n * @note Content generated by '{project-root}/node-scripts/VersionNumberReadStream.js'.\n * @generated Fri Nov 10 2017 17:20:42 GMT-0500 (Eastern Standard Time) \n */\n\nexport let version = '0.5.1';\n\nexport default version;\n\n","/**\r\n * @module fjlErrorThrowing\r\n */\r\nimport {\r\n    typeOf,\r\n    _isType as isType,\r\n    map, length, intercalate,\r\n    isString, isArray, isFunction,\r\n    curry, curry4\r\n} from 'fjl';\r\n\r\n/**\r\n * @memberOf module:fjlErrorThrowing\r\n * @property version {String}\r\n */\r\nexport {version} from './generated/version';\r\n\r\n/**\r\n * @typedef {*} Any - Synonym for 'any value'.\r\n */\r\n\r\n/**\r\n * @typedef {Object<value, valueName, expectedTypeName, foundTypeName, messageSuffix>} TemplateContext\r\n * @description Template context used for error message renderers (functions that take a context obj and return a string).\r\n * @property value {Any}\r\n * @property valueName {String}\r\n * @property expectedTypeName {String} - Expected name of constructor of `value`;  E.g., usually `SomeConstructor.name`;\r\n * @property foundTypeName {String} - Found types name;  E.g., `FoundConstructor.name`;\r\n * @property [messageSuffix=null] {Any} - Message suffix (sometimes an extra hint or instructions for\r\n *  directing user to fix where his/her error has occurred).  Optional.\r\n */\r\n\r\n/**\r\n * Error message template function.\r\n * @typedef {Function} errorMessageCall\r\n * @param tmplContext {TemplateContext}\r\n * @returns {String}\r\n */\r\n\r\n/**\r\n * Used to ensure value matches passed in type.\r\n * @typedef {Function} errorIfNotType\r\n * @param valueName {String}\r\n * @param value {Any}\r\n * @param type {String|Function} - Constructor name or constructor.\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {Undefined}\r\n */\r\n\r\n/**\r\n * Used to ensure a value matches one of one or more types passed in.\r\n * @typedef {Function} errorIfNotTypes\r\n * @param valueName {String}\r\n * @param value {Any}\r\n * @param valueTypes {...(String|Function)} - Constructor names or constructors.\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {Undefined}\r\n */\r\n\r\nexport const\r\n\r\n    /**\r\n     * Resolves/normalizes a type name from either a string or a constructor.\r\n     * @private\r\n     * @function module:fjlErrorThrowing.getTypeName\r\n     * @param type {Function|String} - String or function representing a type.\r\n     * @returns {String}\r\n     * @private\r\n     */\r\n    getTypeName = type => {\r\n        if (isString(type)) { return type; }\r\n        else if (isFunction(type)) { return type.name; }\r\n        throw Error('`fjlErrorThrowing.getTypeName` only accepts strings and/or constructors.  ' +\r\n            'Value type received: ' + typeOf(type) + ';  Value: ' + type);\r\n    },\r\n\r\n    /**\r\n     * Pretty prints an array of types/type-strings for use by error messages;\r\n     * Outputs \"`SomeTypeName`, ...\" from [SomeType, 'SomeTypeName', etc...]\r\n     * @private\r\n     * @function module:fjlErrorThrowing.multiTypesToString\r\n     * @param types {Array|TypesArray}\r\n     * @return {String}\r\n     * @private\r\n     */\r\n    multiTypesToString = types => length(types) ?\r\n             intercalate(', ', map(type => `\\`${getTypeName(type)}\\``, types)) : '',\r\n\r\n    /**\r\n     * Prints a message from an object.  Object signature:\r\n     * {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n     * @function module:fjlErrorThrowing.defaultErrorMessageCall\r\n     * @param tmplContext {Object|TemplateContext} - Object to use in error template.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    defaultErrorMessageCall = tmplContext => {\r\n        const {\r\n            contextName, valueName, value, expectedTypeName,\r\n            foundTypeName, messageSuffix\r\n        } = tmplContext,\r\n            isMultiTypeNames = isArray(expectedTypeName),\r\n            typesCopy = isMultiTypeNames ? 'of type' : 'of one of the types',\r\n            typesToMatchCopy = isMultiTypeNames ? multiTypesToString(expectedTypeName) : expectedTypeName;\r\n        return (contextName ? `\\`${contextName}.` : '`') +\r\n            `${valueName}\\` is not ${typesCopy}: ${typesToMatchCopy}.  ` +\r\n            `Type received: ${foundTypeName}.  Value: ${value};` +\r\n            `${messageSuffix ?  '  ' + messageSuffix + ';' : ''}`;\r\n    },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:fjlErrorThrowing.getErrorIfNotTypeThrower$\r\n     * @param errorMessageCall {Function|errorMessageCall}\r\n     * @returns {Function|errorIfNotType}\r\n     */\r\n    getErrorIfNotTypeThrower$ = errorMessageCall => (contextName, valueName, value, ValueType, messageSuffix = null) => {\r\n        const expectedTypeName = getTypeName(ValueType),\r\n            foundTypeName = typeOf(value);\r\n        if (isType(expectedTypeName, value)) { return; }\r\n        throw new Error(errorMessageCall(\r\n            {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n        ));\r\n    },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:fjlErrorThrowing.getErrorIfNotTypesThrower$\r\n     * @param errorMessageCall {Function|errorMessageCall}\r\n     * @returns {Function|errorIfNotTypes}\r\n     */\r\n    getErrorIfNotTypesThrower$ = errorMessageCall => (contextName, valueName, value, ...valueTypes) => {\r\n        const expectedTypeNames = valueTypes.map(getTypeName),\r\n            matchFound = expectedTypeNames.some(ValueType => isType(ValueType, value)),\r\n            foundTypeName = typeOf(value);\r\n        if (matchFound) { return; }\r\n        throw new Error(\r\n            errorMessageCall({\r\n                contextName, valueName, value,\r\n                expectedTypeName: expectedTypeNames, foundTypeName\r\n            })\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  This is the un-curried version.  For the curried version\r\n     * see `module:fjlErrorThrowing.errorIfNotType`.\r\n     * @function module:fjlErrorThrowing.errorIfNotType$\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {Any}\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {undefined}\r\n     * @uncurried\r\n     */\r\n    errorIfNotType$ = getErrorIfNotTypeThrower$(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  This is the un-curried version.  For the curried version\r\n     * see `module:fjlErrorThrowing.errorIfNotTypes`.\r\n     * @type {Function|module:fjlErrorThrowing.errorIfNotTypes}\r\n     * @function module:fjlErrorThrowing.errorIfNotTypes$\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {Any}\r\n     * @param types {...(String|Function)} - One or more type names or types themselves.\r\n     * @returns {undefined}\r\n     * @uncurried\r\n     */\r\n    errorIfNotTypes$ = getErrorIfNotTypesThrower$(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  Curried.\r\n     * @function module:fjlErrorThrowing.errorIfNotType\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {Any}\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {undefined}\r\n     * @curried\r\n     */\r\n    errorIfNotType = curry(errorIfNotType$),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  Curried.\r\n     * @function module:fjlErrorThrowing.errorIfNotTypes\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {Any}\r\n     * @param types {...(String|Function)} - Type's name or type itself.\r\n     * @returns {undefined}\r\n     * @curried\r\n     */\r\n    errorIfNotTypes = curry4(errorIfNotTypes$),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that values are of a given type.\r\n     *   Also throws informative error messages containing the value types, names, expected type names,\r\n     *   etc.\r\n     * @function module:fjlErrorThrowing.getErrorIfNotTypeThrower\r\n     * @param errorMessageCall {Function|errorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|errorIfNotType} - Returns a function with the same signature as `errorIfNotType` though curried.\r\n     */\r\n    getErrorIfNotTypeThrower = errorMessageCall => curry(getErrorIfNotTypeThrower$(errorMessageCall)),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that a value is of one or more given types.\r\n     *   The returned function is used in cases where informative error messages\r\n     *   containing the value types, names, expected type names, are-required/should-be-used etc.\r\n     * @function module:fjlErrorThrowing.getErrorIfNotTypesThrower\r\n     * @param errorMessageCall {Function|errorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|errorIfNotTypes} - Returns a function with the same signature as `errorIfNotTypes` though curried.\r\n     */\r\n    getErrorIfNotTypesThrower = errorMessageCall => curry4(getErrorIfNotTypesThrower$(errorMessageCall))\r\n;\r\n"],"names":["version","getTypeName","isString","type","isFunction","name","Error","typeOf","multiTypesToString","length","types","intercalate","map","defaultErrorMessageCall","contextName","tmplContext","valueName","value","expectedTypeName","foundTypeName","messageSuffix","isMultiTypeNames","isArray","typesCopy","typesToMatchCopy","getErrorIfNotTypeThrower$","ValueType","isType","errorMessageCall","getErrorIfNotTypesThrower$","valueTypes","expectedTypeNames","matchFound","some","errorIfNotType$","errorIfNotTypes$","errorIfNotType","curry","errorIfNotTypes","curry4","getErrorIfNotTypeThrower","getErrorIfNotTypesThrower"],"mappings":"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"}