{"version":3,"file":"fjl.errorThrowing.js","sources":["../../src/generated/version.js","../../src/fjl.errorThrowing.js"],"sourcesContent":["/**\n * @memberOf module:fjlErrorThrowing\n * @property {String} version - Semantic version string.\n * @note Content generated by '{project-root}/node-scripts/VersionNumberReadStream.js'.\n * @generated Tue Jan 02 2018 18:20:18 GMT-0500 (Eastern Standard Time) \n */\n\nexport let version = '0.7.6';\n\nexport default version;\n\n","/**\r\n * @module fjlErrorThrowing\r\n * @description Contains error throwing facilities for when a value doesn't match a type.\r\n *  In addition gives you curried and uncurried versions of the multi arity functions included.\r\n */\r\nimport {\r\n    typeOf, isset,\r\n    _isType as isType,\r\n    map, length, intercalate,\r\n    isString, isArray, isFunction,\r\n    curry, curry4\r\n} from 'fjl';\r\n\r\n/**\r\n * @typedef {*} Any - Synonym for 'any value'.\r\n */\r\n\r\n/**\r\n * @typedef {String|Function} TypeRef\r\n * @description Type reference.  Type itself or Type's name;  E.g., `Type.name`;\r\n */\r\n\r\n/**\r\n * @typedef {Object<value, valueName, expectedTypeName, foundTypeName, messageSuffix>} TemplateContext\r\n * @description Template context used for error message renderers (functions that take a context obj and return a string).\r\n * @property value {*}\r\n * @property valueName {String}\r\n * @property expectedTypeName {String} - Expected name of constructor of `value`;  E.g., usually `SomeConstructor.name`;\r\n * @property foundTypeName {String} - Found types name;  E.g., `FoundConstructor.name`;\r\n * @property [messageSuffix=null] {*} - Message suffix (sometimes an extra hint or instructions for\r\n *  directing user to fix where his/her error has occurred).  Optional.\r\n */\r\n\r\n/**\r\n * @typedef {Array<(String|Function)>} TypesArray\r\n */\r\n\r\n/**\r\n * @typedef {Function} TypeChecker\r\n * @description Checks whether a value is of given type.\r\n * @param Type {TypeRef} - a Type or it's name;  E.g., `Type.name`.\r\n * @param value {*}\r\n * @returns {Boolean}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorMessageCall\r\n * @description Error message template function.\r\n * @param tmplContext {TemplateContext}\r\n * @returns {String}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotType\r\n * @description Used to ensure value matches passed in type.\r\n * @param type {TypeRef} - Constructor name or constructor.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {Undefined}\r\n */\r\n\r\n/**\r\n * @typedef {Function} ErrorIfNotTypes\r\n * @description Used to ensure a value matches one of one or more types passed in.\r\n * @param valueTypes {TypesArray} - Array of constructor names or constructors.\r\n * @param contextName {String}\r\n * @param valueName {String}\r\n * @param value {*}\r\n * @throws {Error} - If value doesn't match type.\r\n * @returns {Undefined}\r\n */\r\n\r\nexport {version} from './generated/version';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Checks if `type` is a string or a function (constructor or constructor name)\r\n     * @function module:fjlErrorThrowing.isCheckableType\r\n     * @param type {TypeRef}\r\n     * @returns {Boolean}\r\n     */\r\n    isCheckableType = type => isString(type) || isFunction(type),\r\n\r\n    /**\r\n     * Throws an error if `type` is not a checkable type (can't be checked by the `TypeChecker` type)\r\n     * @function module:fjlErrorThrowing.errorIfNotCheckableType\r\n     * @param contextName {String}\r\n     * @param type {TypeRef}\r\n     * @returns {TypeRef} - Type passed in if `type` is checkable\r\n     */\r\n    errorIfNotCheckableType = (contextName, type) => {\r\n        if (!isCheckableType(type)) {\r\n            throw new Error (`${contextName} expects Types to be checked against to be of type \\`String\\` or \\`Function\\`.` +\r\n                `  Type received \\`${typeOf(type)}\\`.  Value \\`${type}\\`.`);\r\n        }\r\n        return type;\r\n    },\r\n\r\n    /**\r\n     * Resolves/normalizes a type name from either a string or a constructor.\r\n     * @private\r\n     * @function module:fjlErrorThrowing.getTypeName\r\n     * @param type {Function|String} - String or function representing a type.\r\n     * @returns {String}\r\n     * @private\r\n     */\r\n    getTypeName = type =>\r\n        errorIfNotCheckableType('getTypeName', type) &&\r\n            isString(type) ? type : type.name,\r\n\r\n    /**\r\n     * Returns a boolean indicating whether given value matches given type.\r\n     * @function module:fjlErrorThrowing.defaultTypeChecker$\r\n     * @param Type {String|Function} - Type name, constructor and/or class.\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    defaultTypeChecker$ = (Type, value) => isType(getTypeName(Type), value) || (\r\n        isFunction(Type) && isset(value) && value instanceof Type),\r\n\r\n    /**\r\n     * Pretty prints an array of types/type-strings for use by error messages;\r\n     * Outputs \"`SomeTypeName`, ...\" from [SomeType, 'SomeTypeName', etc...]\r\n     * @private\r\n     * @function module:fjlErrorThrowing.multiTypesToString\r\n     * @param types {Array|TypesArray}\r\n     * @return {String}\r\n     * @private\r\n     */\r\n    multiTypesToString = types => length(types) ?\r\n             intercalate(', ', map(type => `\\`${getTypeName(type)}\\``, types)) : '',\r\n\r\n    /**\r\n     * Prints a message from an object.  Object signature:\r\n     * {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n     * @function module:fjlErrorThrowing.defaultErrorMessageCall\r\n     * @param tmplContext {Object|TemplateContext} - Object to use in error template.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    defaultErrorMessageCall = tmplContext => {\r\n        const {\r\n            contextName, valueName, value, expectedTypeName,\r\n            foundTypeName, messageSuffix\r\n        } = tmplContext,\r\n            isMultiTypeNames = isArray(expectedTypeName),\r\n            typesCopy = isMultiTypeNames ? 'of type' : 'of one of the types',\r\n            typesToMatchCopy = isMultiTypeNames ? multiTypesToString(expectedTypeName) : expectedTypeName;\r\n        return (contextName ? `\\`${contextName}.` : '`') +\r\n            `${valueName}\\` is not ${typesCopy}: ${typesToMatchCopy}.  ` +\r\n            `Type received: ${foundTypeName}.  Value: ${value};` +\r\n            `${messageSuffix ?  '  ' + messageSuffix + ';' : ''}`;\r\n    },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:fjlErrorThrowing.getErrorIfNotTypeThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotType}\r\n     */\r\n    getErrorIfNotTypeThrower$ = (errorMessageCall, typeChecker = defaultTypeChecker$) => (ValueType, contextName, valueName, value, messageSuffix = null) => {\r\n        const expectedTypeName = getTypeName(ValueType),\r\n            foundTypeName = typeOf(value);\r\n        if (typeChecker(ValueType, value)) { return; } // Value matches type\r\n        throw new Error(errorMessageCall(\r\n            {contextName, valueName, value, expectedTypeName, foundTypeName, messageSuffix}\r\n        ));\r\n    },\r\n\r\n    /**\r\n     * Gets the error message thrower seeded with passed in errorMessage template call.\r\n     * @function module:fjlErrorThrowing.getErrorIfNotTypesThrower$\r\n     * @param errorMessageCall {Function|ErrorMessageCall}\r\n     * @param typeChecker {Function|TypeChecker} - Function<Type, value>:Boolean\r\n     * @returns {Function|ErrorIfNotTypes}\r\n     */\r\n    getErrorIfNotTypesThrower$ = (errorMessageCall, typeChecker = defaultTypeChecker$) => (valueTypes, contextName, valueName, value) => {\r\n        const expectedTypeNames = valueTypes.map(getTypeName),\r\n            matchFound = valueTypes.some(ValueType => typeChecker(ValueType, value)),\r\n            foundTypeName = typeOf(value);\r\n        if (matchFound) { return; }\r\n        throw new Error(\r\n            errorMessageCall({\r\n                contextName, valueName, value,\r\n                expectedTypeName: expectedTypeNames, foundTypeName\r\n            })\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  This is the un-curried version.  For the curried version\r\n     * see `module:fjlErrorThrowing.errorIfNotType`.\r\n     * @function module:fjlErrorThrowing.errorIfNotType$\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {undefined}\r\n     * @uncurried\r\n     */\r\n    errorIfNotType$ = getErrorIfNotTypeThrower$(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  This is the un-curried version.  For the curried version\r\n     * see `module:fjlErrorThrowing.errorIfNotTypes`.\r\n     * @type {Function|module:fjlErrorThrowing.errorIfNotTypes}\r\n     * @function module:fjlErrorThrowing.errorIfNotTypes$\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {undefined}\r\n     * @uncurried\r\n     */\r\n    errorIfNotTypes$ = getErrorIfNotTypesThrower$(defaultErrorMessageCall),\r\n\r\n    /**\r\n     * Same as `defaultTypeChecker$` except curried:\r\n     *  \"Returns a boolean indicating whether given value matches given type\".\r\n     * @curried\r\n     * @function module:fjlErrorThrowing.defaultTypeChecker\r\n     * @param Type {String|Function} - Type name, constructor and/or class.\r\n     * @param value {*}\r\n     * @returns {Boolean}\r\n     */\r\n    defaultTypeChecker = curry(defaultTypeChecker$),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of given `type`.  Throws an error if value\r\n     * is not of given `type`.  Curried.\r\n     * @function module:fjlErrorThrowing.errorIfNotType\r\n     * @param type {String|Function} - Type's name or type itself.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @param [messageSuffix=null] {String} - Optional.\r\n     * @returns {undefined}\r\n     * @curried\r\n     */\r\n    errorIfNotType = curry(errorIfNotType$),\r\n\r\n    /**\r\n     * Checks that passed in `value` is of one of the given `types`.  Throws an error if value\r\n     *  is not of one of the given `types`.  Curried.\r\n     * @function module:fjlErrorThrowing.errorIfNotTypes\r\n     * @param types {Array} - Array of one or more types or type names themselves.\r\n     * @param contextName {String} - Name of context to attribute errors if thrown.\r\n     * @param valueName {String} - String rep of value.\r\n     * @param value {*}\r\n     * @returns {undefined}\r\n     * @curried\r\n     */\r\n    errorIfNotTypes = curry4(errorIfNotTypes$),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that values are of a given type.\r\n     *   Also throws informative error messages containing the value types, names, expected type names,\r\n     *   etc.\r\n     * @function module:fjlErrorThrowing.getErrorIfNotTypeThrower\r\n     * @param errorMessageCall {Function|errorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotType} - Returns a function with the same signature as `errorIfNotType` though curried.\r\n     */\r\n    getErrorIfNotTypeThrower = errorMessageCall => curry(getErrorIfNotTypeThrower$(errorMessageCall)),\r\n\r\n    /**\r\n     * Returns a function that can be used to ensure that a value is of one or more given types.\r\n     *   The returned function is used in cases where informative error messages\r\n     *   containing the value types, names, expected type names, are-required/should-be-used etc.\r\n     * @function module:fjlErrorThrowing.getErrorIfNotTypesThrower\r\n     * @param errorMessageCall {Function|errorMessageCall} - Template function (takes an info-object and returns a printed string).\r\n     * @returns {Function|ErrorIfNotTypes} - Returns a function with the same signature as `errorIfNotTypes` though curried.\r\n     */\r\n    getErrorIfNotTypesThrower = errorMessageCall => curry4(getErrorIfNotTypesThrower$(errorMessageCall))\r\n;\r\n\r\nexport default {\r\n    defaultTypeChecker$,\r\n    defaultTypeChecker,\r\n    getTypeName,\r\n    multiTypesToString,\r\n    defaultErrorMessageCall,\r\n    errorIfNotType$,\r\n    errorIfNotType,\r\n    errorIfNotTypes$,\r\n    errorIfNotTypes,\r\n    getErrorIfNotTypeThrower$,\r\n    getErrorIfNotTypeThrower,\r\n    getErrorIfNotTypesThrower$,\r\n    getErrorIfNotTypesThrower\r\n};\r\n"],"names":["version","isCheckableType","isString","type","isFunction","errorIfNotCheckableType","contextName","Error","typeOf","getTypeName","name","defaultTypeChecker$","Type","value","isType","isset","multiTypesToString","length","types","intercalate","map","defaultErrorMessageCall","tmplContext","valueName","expectedTypeName","foundTypeName","messageSuffix","isMultiTypeNames","isArray","typesCopy","typesToMatchCopy","getErrorIfNotTypeThrower$","errorMessageCall","typeChecker","ValueType","getErrorIfNotTypesThrower$","valueTypes","expectedTypeNames","matchFound","some","errorIfNotType$","errorIfNotTypes$","defaultTypeChecker","curry","errorIfNotType","errorIfNotTypes","curry4","getErrorIfNotTypeThrower","getErrorIfNotTypesThrower"],"mappings":";;;;AAAA;;;;;;;AAOA,AAAO,IAAIA,UAAU,OAAd;;ACPP;;;;;AAKA,AAuEO,IAQHC,kBAAkB,SAAlBA,eAAkB;WAAQC,aAASC,IAAT,KAAkBC,eAAWD,IAAX,CAA1B;CARf;IAiBHE,0BAA0B,SAA1BA,uBAA0B,CAACC,WAAD,EAAcH,IAAd,EAAuB;QACzC,CAACF,gBAAgBE,IAAhB,CAAL,EAA4B;cAClB,IAAII,KAAJ,CAAcD,WAAH,yGACQE,WAAOL,IAAP,CADR,mBACoCA,IADpC,QAAX,CAAN;;WAGGA,IAAP;CAtBD;IAiCHM,cAAc,SAAdA,WAAc;WACVJ,wBAAwB,aAAxB,EAAuCF,IAAvC,KACID,aAASC,IAAT,CADJ,GACqBA,IADrB,GAC4BA,KAAKO,IAFvB;CAjCX;IA4CHC,sBAAsB,SAAtBA,mBAAsB,CAACC,IAAD,EAAOC,KAAP;WAAiBC,YAAOL,YAAYG,IAAZ,CAAP,EAA0BC,KAA1B,KACnCT,eAAWQ,IAAX,KAAoBG,UAAMF,KAAN,CAApB,IAAoCA,iBAAiBD,IADnC;CA5CnB;IAwDHI,qBAAqB,SAArBA,kBAAqB;WAASC,WAAOC,KAAP,IACrBC,gBAAY,IAAZ,EAAkBC,QAAI;qBAAaX,YAAYN,IAAZ,CAAb;KAAJ,EAAwCe,KAAxC,CAAlB,CADqB,GAC+C,EADxD;CAxDlB;IAmEHG,0BAA0B,SAA1BA,uBAA0B,cAAe;QAEjCf,WAFiC,GAIjCgB,WAJiC,CAEjChB,WAFiC;QAEpBiB,SAFoB,GAIjCD,WAJiC,CAEpBC,SAFoB;QAETV,KAFS,GAIjCS,WAJiC,CAETT,KAFS;QAEFW,gBAFE,GAIjCF,WAJiC,CAEFE,gBAFE;QAGjCC,aAHiC,GAIjCH,WAJiC,CAGjCG,aAHiC;QAGlBC,aAHkB,GAIjCJ,WAJiC,CAGlBI,aAHkB;QAKjCC,gBALiC,GAKdC,YAAQJ,gBAAR,CALc;QAMjCK,SANiC,GAMrBF,mBAAmB,SAAnB,GAA+B,qBANV;QAOjCG,gBAPiC,GAOdH,mBAAmBX,mBAAmBQ,gBAAnB,CAAnB,GAA0DA,gBAP5C;;WAQ9B,CAAClB,oBAAmBA,WAAnB,SAAoC,GAArC,KACAiB,SADA,iBACsBM,SADtB,UACoCC,gBADpC,iCAEeL,aAFf,kBAEyCZ,KAFzC,iBAGAa,gBAAiB,OAAOA,aAAP,GAAuB,GAAxC,GAA8C,EAH9C,EAAP;CA3ED;IAwFHK,4BAA4B,SAA5BA,yBAA4B,CAACC,gBAAD;QAAmBC,WAAnB,uEAAiCtB,mBAAjC;WAAyD,UAACuB,SAAD,EAAY5B,WAAZ,EAAyBiB,SAAzB,EAAoCV,KAApC,EAAoE;YAAzBa,aAAyB,uEAAT,IAAS;;YAC/IF,mBAAmBf,YAAYyB,SAAZ,CAAzB;YACIT,gBAAgBjB,WAAOK,KAAP,CADpB;YAEIoB,YAAYC,SAAZ,EAAuBrB,KAAvB,CAAJ,EAAmC;;SAHkH;cAI/I,IAAIN,KAAJ,CAAUyB,iBACZ,EAAC1B,wBAAD,EAAciB,oBAAd,EAAyBV,YAAzB,EAAgCW,kCAAhC,EAAkDC,4BAAlD,EAAiEC,4BAAjE,EADY,CAAV,CAAN;KAJwB;CAxFzB;IAwGHS,6BAA6B,SAA7BA,0BAA6B,CAACH,gBAAD;QAAmBC,WAAnB,uEAAiCtB,mBAAjC;WAAyD,UAACyB,UAAD,EAAa9B,WAAb,EAA0BiB,SAA1B,EAAqCV,KAArC,EAA+C;YAC3HwB,oBAAoBD,WAAWhB,GAAX,CAAeX,WAAf,CAA1B;YACI6B,aAAaF,WAAWG,IAAX,CAAgB;mBAAaN,YAAYC,SAAZ,EAAuBrB,KAAvB,CAAb;SAAhB,CADjB;YAEIY,gBAAgBjB,WAAOK,KAAP,CAFpB;YAGIyB,UAAJ,EAAgB;;;cACV,IAAI/B,KAAJ,CACFyB,iBAAiB;oCAAA,EACAT,oBADA,EACWV,YADX;8BAEKwB,iBAFL,EAEwBZ;SAFzC,CADE,CAAN;KALyB;CAxG1B;IAkIHe,kBAAkBT,0BAA0BV,uBAA1B,CAlIf;IAiJHoB,mBAAmBN,2BAA2Bd,uBAA3B,CAjJhB;IA4JHqB,qBAAqBC,UAAMhC,mBAAN,CA5JlB;IA0KHiC,iBAAiBD,UAAMH,eAAN,CA1Kd;IAuLHK,kBAAkBC,WAAOL,gBAAP,CAvLf;IAiMHM,2BAA2B,SAA3BA,wBAA2B;WAAoBJ,UAAMZ,0BAA0BC,gBAA1B,CAAN,CAApB;CAjMxB;IA2MHgB,4BAA4B,SAA5BA,yBAA4B;WAAoBF,WAAOX,2BAA2BH,gBAA3B,CAAP,CAApB;CA3MzB;;AA8MP,wBAAe;4CAAA;0CAAA;4BAAA;0CAAA;oDAAA;oCAAA;kCAAA;sCAAA;oCAAA;wDAAA;sDAAA;0DAAA;;CAAf;;;;;;;;;;;;;;;;;;;;;;;;;;"}